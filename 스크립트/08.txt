3.

<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-swagger2</artifactId>
  <version>2.8.0</version>
</dependency>
<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-swagger-ui</artifactId>
  <version>2.8.0</version>
</dependency>
<dependency>
  <groupId>org.codehaus.woodstox</groupId>
  <artifactId>woodstox-core-asl</artifactId>
  <version>4.4.1</version>
</dependency>



4.

package com.multi.contactsapp;
......
@Configuration
@EnableSwagger2
public class SwaggerConfig {                                    
    @Bean
    public Docket api() { 
        return new Docket(DocumentationType.SWAGGER_2)  
          .select()                                  
          .apis(RequestHandlerSelectors.any())              
          .paths(PathSelectors.any())                          
          .build()
          .apiInfo(apiInfo());                                           
    }

   private ApiInfo apiInfo() {
        return new ApiInfo(
          "연락처 서비스 ", 
          "RESTful Service 학습을 위해 만든 서비스 API 입니다.", 
          "v1.0", 
          "Terms of service", 
          new Contact("원형섭", "http://opensg.net", "stepanowon@opensg.net"), 
          "MIT License", "http://opensg.net/license.html", Collections.emptyList());
   }
}

----------------

<beans:bean class="com.multi.contactsapp.SwaggerConfig"/> 



6.

@Configuration
@EnableWebMvc
public class WebConfig extends WebMvcConfigurerAdapter {
    ......(생략)
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("swagger-ui.html")
                .addResourceLocations("classpath:/META-INF/resources/");

        registry.addResourceHandler("/webjars/**")
                .addResourceLocations("classpath:/META-INF/resources/webjars/");
    }
}



7.

<resources mapping="swagger-ui.html" 
     location="classpath:/META-INF/resources/" />
<resources mapping="/webjars/**" 
     location="classpath:/META-INF/resources/webjars/" />



8.

@RestController
@RequestMapping(value="contacts")
@Api(value="ContactList Service Controller, 연락처 RESTful 서비스")
public class ContactRestController {
   @Autowired
   private ContactService contactService;
   ......
   @ApiOperation(value="연락처 수정", notes="기존 연락처를 수정합니다. .... ")
   @RequestMapping(value="{no}", method = RequestMethod.PUT)
   public Result updateContact(
      @ApiParam(value="연락처의 일련번호") @PathVariable("no") int no, 
      @ApiParam(value="수정할 연락처 정보") @RequestBody Contact contact) {
      contact.setNo(no);
      return contactService.updateContact(contact);
   }   
   ......
}

---------------------------------------------

* @Api
  : Controller Class 수준의 Annotation. API 전반에 대한 설명 정보를 제공함.
* @ApiOperation
  : Controller 메서드 수준의 Annotation. 컨트롤러 메서드에 대한 설명 정보를 제공함
* @ApiParam
  : Parameter 수준의 Annotation. 파라미터 각각에 대한 설명 정보를  제공함. 실제 파라미터 앞에 직접 부여하는 특징이 있음
* @ApiImplicitParam
  : @ApiParam과 유사하지만 실제 파라미터 앞에 부여하는 것이 아니라 메서드 수준에서 정보를 제공하는 점이 다름. 이 Annotation의 title 속성과 실제 파라미터 명이 일치해야 함.
* @ApiImplicitParams
  : 여러개의 @ApiImplicitParam을 묶어주기 위한 역할을 수행함.




9. 

@ApiOperation(value="연락처 목록 조회", notes="연락처 목록 조회용 리소스입니다. ....(생략)")
@ApiImplicitParams({
    @ApiImplicitParam(name="pageno",value="페이지 번호",dataType="string",paramType="query",defaultValue="0"), 
    @ApiImplicitParam(name="pagesize",value="페이지 사이즈",dataType="string",paramType="query",defaultValue="4") 
})
@RequestMapping(method = RequestMethod.GET)
public ContactList getContactList(
    @RequestParam(value="pageno", required=false, defaultValue="0") int pageNo, 
    @RequestParam(value="pagesize", required=false, defaultValue="4")int pageSize) {
  if (pageNo==0) {
    return contactService.getContactList();
  } else {
    return contactService.getContactList(pageNo, pageSize);
  }
}



10.

** ContactList 클래스와 Result 클래스에 대해서도 동일한 방식으로 작성함.

@ApiModel(value="연락처 한 건 객체")
@XmlRootElement(name="contact")
@XmlAccessorType(XmlAccessType.FIELD)
public class Contact {
  @ApiModelProperty(value="일련번호", example="1004")
  @XmlAttribute
  private int no;
  @ApiModelProperty(value="이름", example="홍길동")
  private String name;
  @ApiModelProperty(value="전화번호", example="010-2222-3331")
  private String tel;
  @ApiModelProperty(value="주소", example="서울시")
  private String address;

  //생성자와 Setter, Getter 코드 자동 생성
}




11.

---------------------------
* @Api~ Annotation의 정보에 의해 구성된 JSON Document가 생성됨.
* 이 JSON Document는 Swagger UI를 거쳐서 API Console을 생성하게 됨.
* 실제로는 ?output=json 쿼리스트링 없이 http://tfactory.com:8000/contactsvc4/v2/api-docs URI로 접근해도 된다. 지금은 브라우저로 접속하고 있는데, Accept Header로 application/xml 이 요청되기 때문에 오류처럼 보일 수 있지만 실제로는 오류가 아니다.



14.

----------------------------
* @ApiModel과 @ApiModelProperty Annotation로 지정된 정보를 이용해 구성함
* API Console로 연락처를 추가하는 기능을 수행하면 @ApiModelProperty의 example 속성에 부여된 값이 기본값으로 주어진 것을 확인할 수 있음.




