51. 
CREATE TABLE contact 
(
   no       	NUMBER PRIMARY KEY,
   name     VARCHAR2(20)  NOT NULL,
   tel     	VARCHAR2(30)  NOT NULL,   
   address  VARCHAR2(200)  
);

CREATE sequence contact_seq START WITH 1 INCREMENT BY 1;


53. 

■변경한 Dynamic Module Version에 맞춰서 web.xml의 스키마 버전을 변경한다.
<web-app
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="...... http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  version="3.0">

■여기까지의 기능 테스트
프로젝트를 오른쪽 클릭해서 Run As - Run on Server로 실행함.
Hello World 화면이 나타나면 정상적인 실행임.
한글이 깨져서 나타나는 부분은 한글 설정이 이루어지 않아서 그런 것임.



55.
<!-- MyBatis -->
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis</artifactId>
	<version>3.4.5</version>
</dependency>
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis-spring</artifactId>
	<version>1.3.2</version>
</dependency>
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-jdbc</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
<dependency>
	<groupId>commons-dbcp</groupId>
	<artifactId>commons-dbcp</artifactId>
	<version>1.4</version>
</dependency>
<!-- H2 Database -->
<dependency>
	<groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
	<version>1.4.195</version>
</dependency>



56.
<filter>
   <filter-name>encodingFilter</filter-name>
   <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
   <init-param>
      <param-name>encoding</param-name><param-value>utf-8</param-value>
   </init-param>
   <init-param>
      <param-name>forceEncoding</param-name><param-value>true</param-value>
   </init-param>
</filter>
<filter-mapping>
   <filter-name>encodingFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>


57.

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:tcp://localhost/~/test" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/mapper/**/*.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean> 


58.

<context:component-scan base-package="com.multi.contactsapp" />



60.

package com.multi.contactsapp.domain;
public class Contact {
	private int no;
	private String name;
	private String tel;
	private String address;
	//생성자, Setter, Getter 자동 생성
}

** mybatis-config.xml**
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
   <typeAliases>
      <typeAlias type="com.multi.contactsapp.domain.Contact" alias="Contact"/>
   </typeAliases> 
</configuration>


61.
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="contact">
   <select id="selectall" resultType="Contact">
      SELECT no, name, tel, address  
      FROM contact  
      ORDER BY no DESC
   </select>
   <select id="selectone" parameterType="Contact"
      resultType="Contact">
      SELECT no, name, tel, address 
      FROM contact WHERE no=#{no}
   </select>
   <select id="selectcnt" resultType="int">
      SELECT count(*) FROM contact
   </select>
   <update id="update" parameterType="Contact">
      UPDATE contact 
      SET name=#{name}, tel=#{tel}, address=#{address} 
      WHERE no=#{no}
   </update>
   <delete id="delete" parameterType="Contact">
      DELETE contact WHERE no=#{no}
   </delete>
   <insert id="insert" parameterType="Contact">
     <selectKey keyProperty="no" resultType="int" 
         order="BEFORE">
         select contact_seq.nextval from dual
     </selectKey>
      INSERT INTO contact (no, name, tel, address)
      VALUES (#{no}, #{name}, #{tel}, #{address})
   </insert>
</mapper>


62.

@Repository
public class ContactDAO {

   @Autowired
   private SqlSession sqlSession;

   public List<Contact> getContactList() {
      return sqlSession.selectList("contact.selectall");
   }

   public List<Contact> getContactList(int pageNo, int pageSize) {
      int offset = (pageNo-1)*pageSize;
      int limit = pageSize;
      return sqlSession.selectList("contact.selectall",  null, new RowBounds(offset, limit));
   }
	
   public int getContactCount() {
      return sqlSession.selectOne("contact.selectcnt");
   }

   public Contact getContactOne(Contact c) {
      return sqlSession.selectOne("contact.selectone", c);
   }
	
   public int insertContact(Contact c) {
      sqlSession.insert("contact.insert", c);
      return c.getNo();
   }
	
   public int updateContact(Contact c) {
      return sqlSession.update("contact.update", c);
   }
	
   public int deleteContact(Contact c) {
      return sqlSession.delete("contact.delete", c);
   }
}


64.

package com.multi.contactsapp.service;
......
@Service
public class ContactService {
   @Autowired
   private ContactDAO contactDAO;
   public List<Contact> getContactList() {
      return contactDAO.getContactList();
   }
   public List<Contact> getContactList(int pageNo, int pageSize) {
      return contactDAO.getContactList(pageNo, pageSize);
   }	
   public Contact getContactOne(Contact c) {
      return contactDAO.getContactOne(c);
   }
   public int insertContact(Contact c) {
      return contactDAO.insertContact(c);
   }
   public int updateContact(Contact c) {
       return contactDAO.updateContact(c);
   }	
   public int deleteContact(Contact c) {
       return contactDAO.deleteContact(c);
   }
}



66.

@Controller
public class ContactController {
   @Autowired
   private ContactService contactService;

   @GetMapping("list.do")
   public ModelAndView getContactList() {
      ModelAndView mav = new ModelAndView();
      mav.addObject("contacts",  contactService.getContactList());
      mav.setViewName("contact");
      return mav;
   }	
   @RequestMapping(value="add.do", method=RequestMethod.POST)
   public String  insertContact(Contact c) {
      contactService.insertContact(c);
      return "redirect:list.do";
   }
   @RequestMapping(value="update.do", method=RequestMethod.POST)
   public ModelAndView  updateContact(Contact c) {
      contactService.updateContact(c);
      return new ModelAndView("redirect:list.do");
   }
}


67.

<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<%@ page import="java.util.*" %>
<%@ page import="com.multi.contactsapp.domain.*" %>
<%
  List<Contact> contacts = (List<Contact>)request.getAttribute("contacts");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Insert title here</title>
<style>
    table.mytable { width:500px; }
    table.mytable > thead {   background-color: aqua; }
    table.mytable > tbody  td { border-bottom: solid 1px gray; padding:3px 10px 3px 10px; }
    div.myinput { padding-bottom: 3px; }
    div.box { padding: 20px; }
</style>
<script type="text/javascript" src="https://code.jquery.com/jquery.js"></script>
<script type="text/javascript">
$(function() {
  $("#add").click(function() {
    $("#no").val("0");
    $("#f1")[0].submit();
  })
 
  $("#update").click(function() {
    $("#f1")[0].action = "update.do";
    $("#f1")[0].submit();
  })
})
</script>
</head>
<body>
  <div>
    <div class="box">
      <form id="f1" method="post" action="add.do">
          <div class="myinput">번호 : <input type="text" id="no" name="no" /></div>
          <div class="myinput">이름 : <input type="text" id="name" name="name" /></div>
          <div class="myinput">전화 : <input type="text" id="tel" name="tel" /></div>
          <div class="myinput">주소 : <input type="text" id="address" name="address" /></div>
      </form> 
      <button id="add">추가</button>
      <button id="update">수정</button>
    </div>
    <div  style="margin:10px 10px 10px 10px; ">
      <table class="mytable">
        <thead>
          <tr>
            <th>번호</th><th>성명</th><th>전화</th><th>주소</th>
          </tr>
        </thead>
        <tbody>
        <% for (Contact c : contacts) { %>
          <tr>
            <td><%=c.getNo() %></td>
            <td><%=c.getName() %></td>
            <td><%=c.getTel() %></td>
            <td><%=c.getAddress() %></td>
          </tr>
        <% } %>
        </tbody>
      </table>
    </div>
  </div>
</body>
</html>